<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SkaaGameDataLib</name>
    </assembly>
    <members>
        <member name="F:SkaaGameDataLib.Util.DataRowExtensions.ResIdxFrameNameColumn">
            <summary>
            Used in a <see cref="T:System.Data.DataTable"/> since <see cref="F:SkaaGameDataLib.Util.FileFormats._ResIdxFile"/> does not have column names
            </summary>
        </member>
        <member name="F:SkaaGameDataLib.Util.DataRowExtensions.ResIdxFrameOffsetColumn">
            <summary>
            Used in a <see cref="T:System.Data.DataTable"/> since <see cref="F:SkaaGameDataLib.Util.FileFormats._ResIdxFile"/> does not have column names
            </summary>
        </member>
        <member name="F:SkaaGameDataLib.Util.DataRowExtensions.SprFrameNameColumn">
            <summary>
            Used in a <see cref="T:System.Data.DataTable"/> by the standard game set in its <see cref="T:SkaaGameDataLib.Util.DbfFile"/> tables
            </summary>
        </member>
        <member name="F:SkaaGameDataLib.Util.DataRowExtensions.SprFrameOffsetColumn">
            <summary>
            Used in a <see cref="T:System.Data.DataTable"/> by the standard game set in its <see cref="T:SkaaGameDataLib.Util.DbfFile"/> tables
            </summary>
        </member>
        <member name="M:SkaaGameDataLib.Util.DbfFileWriter.Save(System.Data.DataTable,System.IO.Stream)">
            <summary>
            Saves this <see cref="T:System.Data.DataTable"/> to the specified stream in the DBF/dBaseIII format
            </summary>
            <param name="dt">The DataTable to save</param>
            <param name="str">The stream to which to write</param>
        </member>
        <member name="M:SkaaGameDataLib.Util.DbfFileWriter.Save(System.Data.DataTable,System.String)">
            <summary>
            Saves this <see cref="T:System.Data.DataTable"/> as the specified file in the DBF/dBaseIII format
            </summary>
            <param name="dt">The DataTable to save</param>
            <param name="filepath">The fully-qualified path of the file to write to</param>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataSetExtensions.GetDataSourceList(System.Data.DataSet)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1"/> of all data sources in the <see cref="P:System.Data.DataSet.ExtendedProperties"/> element with the name of <see cref="F:SkaaGameDataLib.Util.DataSetExtensions.DataSourcesPropertyName"/>
            </summary>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataSetExtensions.AddDataSource(System.Data.DataSet,System.String)">
            <summary>
            Adds a new "data source" string to the <see cref="P:System.Data.DataSet.ExtendedProperties"/> <see cref="T:System.Collections.Generic.List`1"/> named <see cref="F:SkaaGameDataLib.Util.DataSetExtensions.DataSourcesPropertyName"/>
            </summary>
            <param name="datasource">The name of the data source to add</param>
            <remarks>If <see cref="P:System.Data.DataSet.ExtendedProperties"/> does not contain <see cref="F:SkaaGameDataLib.Util.DataSetExtensions.DataSourcesPropertyName"/>, it will be created.</remarks>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataSetExtensions.RemoveDataSource(System.Data.DataSet,System.String)">
            <summary>
            Removes the specified data source from the <see cref="P:System.Data.DataSet.ExtendedProperties"/> <see cref="T:System.Collections.Generic.List`1"/> named <see cref="F:SkaaGameDataLib.Util.DataSetExtensions.DataSourcesPropertyName"/>
            </summary>
            <param name="datasource">The name of the data source to remove</param>
            <returns>false if the specified data source does not exist, true otherwise</returns>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataSetExtensions.OpenStandardGameSet(System.Data.DataSet,System.String)">
            <summary>
            Opens the specified <see cref="F:SkaaGameDataLib.Util.FileFormats.ResIdxDbf"/>, adds all of its tables and records to the <see cref="T:System.Data.DataSet"/> and adds the file's name, 
            from <see cref="M:System.IO.Path.GetFileName(System.String)"/>, as a new data source
            </summary>
            <param name="filePath"></param>
            <returns>false if <see cref="M:SkaaGameDataLib.Util.DbfFile.ReadStream(System.IO.Stream)"/> returned false, true otherwise</returns>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataSetExtensions.SaveStandardGameSet(System.Data.DataSet,System.String)">
            <summary>
            Saves this <see cref="T:System.Data.DataSet"/> to the specified file in the format of <see cref="F:SkaaGameDataLib.Util.FileFormats.ResIdxDbf"/>, only including a 
            <see cref="T:System.Data.DataTable"/> if its <see cref="F:SkaaGameDataLib.Util.DataTableExtensions.DataSourcePropertyName"/> is <see cref="F:SkaaGameDataLib.Util.DataSetExtensions.StandardGameSetDefaultName"/>
            </summary>
            <param name="filepath">The path and file to save this <see cref="T:System.Data.DataSet"/> to</param>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataSetExtensions.SaveGameSet(System.Data.DataSet,System.String,System.String)">
            <summary>
            Saves a portion of this <see cref="T:System.Data.DataSet"/> to the specified file in the format of <see cref="F:SkaaGameDataLib.Util.FileFormats.ResIdxDbf"/>
            </summary>
            <param name="setName">Specifies the <see cref="F:SkaaGameDataLib.Util.DataTableExtensions.DataSourcePropertyName"/> to consider part of the standard game set</param>
            <param name="filepath">The path and file to save this <see cref="T:System.Data.DataSet"/> to</param>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataSetExtensions.GetGameSetStream(System.Data.DataSet)">
            <summary>
            Get a <see cref="T:System.IO.MemoryStream"/> of the entire <see cref="T:System.Data.DataSet"/>
            </summary>
            <returns>A <see cref="T:System.IO.MemoryStream"/> in the format of std.set</returns>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataSetExtensions.GetStandardGameSetStream(System.Data.DataSet)">
            <summary>
            Get a <see cref="T:System.IO.MemoryStream"/> of the <see cref="T:System.Data.DataSet"/> consisting of the standard game set, <see cref="F:SkaaGameDataLib.Util.DataSetExtensions.StandardGameSetDefaultName"/>
            </summary>
            <returns>A <see cref="T:System.IO.MemoryStream"/> in the format of std.set</returns>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataSetExtensions.GetGameSetStream(System.Data.DataSet,System.String)">
            <summary>
            Get a <see cref="T:System.IO.MemoryStream"/> of the <see cref="T:System.Data.DataSet"/> consisting of the specified set
            </summary>
            <param name="set">A value that matches the <see cref="F:SkaaGameDataLib.Util.DataSetExtensions.DataSourcesPropertyName"/> element in <see cref="P:System.Data.DataSet.ExtendedProperties"/>, 
            which further matches an element of each table's <see cref="P:System.Data.DataTable.ExtendedProperties"/>. If null, all tables are used.</param>
            <returns>A <see cref="T:System.IO.MemoryStream"/> in the format of std.set</returns>
        </member>
        <member name="T:SkaaGameDataLib.Util.FileFormats">
            <summary>
            Used to describe the various file and data formats in use by 7KAA. Values beginning with an underscore
            are special values not used by the game.
            </summary>
            <remarks>
            Values beginning with an underscore are special values not used by the game but used for file 
            identification purposes or to provide a generic description for formats that share a base type. 
            For example, <see cref="F:SkaaGameDataLib.Util.FileFormats._ResIdxFile"/> is used in documentation to describe all data 
            using the ResIdx file format. It is only the format of the records within those files that differs,
            and this is referred to as its "data format" within documentation at http://www.7kfans.com.
            <para>
            A quick view of some file formats:
            spr files:
            [frames]
            uint32 size; short width; short height;[/frames]
            ----------------------------------------------------------
            res files(bmp):
            uint32 size; short width; short height; rle_bmp_data;
            ----------------------------------------------------------
            res files(multi-bmp):
            short record_count;
            [records]
            char[9] record_name; uint32 bmp_offset;[/records]
            [bmps]
            short width; short height; rle_bmp_data; [/bmps]
            ----------------------------------------------------------
            res files(dbf):
            short dBaseVersion = 0x3;
            byte[3] dateLastEdited = { 0xYY 0xMM 0xDD }
            ...dbf data...
            ----------------------------------------------------------
            res files (tut_text):
            short record_count;
            [records]
            char[9] record_name; uint32 text_offset;[/records]
            [texts]
            short width; short height; rle_bmp_data; [/texts]
            </para>
            </remarks>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats._Any">
            <summary>
            This value is only used in file identification routines or to refer to an arbitrary format in documentation and should not otherwise be used. It differs
            from <see cref="F:SkaaGameDataLib.Util.FileFormats._Unknown"/> in that it implies the file type is unknown and no attempt has yet been made to identify it.
            </summary>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats._Unknown">
            <summary>
            This value is only used in file identification routines or to refer to an unknown format in documentation and should not otherwise be used. It differs
            from <see cref="F:SkaaGameDataLib.Util.FileFormats._Any"/> in that it implies the file type could not be identified.
            </summary>
            <seealso cref="!:ResourceDefinitionReader.ReadDefinitions(Stream, bool)"/>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats._ResIdxFile">
            <summary>
            This value is only used in file identification routines or to refer to the ResIdx format in documentation and should not otherwise be used.
            </summary>
            <seealso cref="!:ResourceDefinitionReader.ReadDefinitions(Stream, bool)"/>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats._ResFile">
            <summary>
            This value is only used in file identification routines or to refer to the Res format in documentation and should not otherwise be used.
            </summary>
            <seealso cref="!:ResourceDefinitionReader.ReadDefinitions(Stream, bool)"/>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats.SpriteSpr">
            <summary>
            A file, generally with an SPR extension, that contains only <see cref="!:SkaaFrame"/> data and no additional header/trailer or identifier
            </summary>
            <see cref="T:SkaaGameDataLib.Util.IndexedBitmap"/>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats.ResIdxFramesSpr">
            <summary>
            Describes image data, generally within a file with an extension of SPR or RES. The data contains a <see cref="T:System.UInt32"/> value describing
            its size, in bytes, followed by two <see cref="T:System.UInt16"/> values describing its width and height, in pixels.
            </summary>
            <seealso cref="!:SkaaSpriteFrame"/>
            <see cref="!:SkaaFrame"/>
            <see cref="T:SkaaGameDataLib.Util.IndexedBitmap"/>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats.ResSpriteSpr">
            <summary>
            A file which has a format matching that off <see cref="F:SkaaGameDataLib.Util.FileFormats.ResIdxFramesSpr"/> but which
            references a different table in std.set.
            </summary>
            <remarks>
            For example, i_town.res references the TOWNLAY table.
            </remarks>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats.ResIdxDbf">
            <summary>
            This format is only used for 7KAA's game set files, of which there is only one
            distributed with the game (as of release 2.14): std.set.
            </summary>
            <seealso cref="!:GameSetFile"/>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats.ResIdxMultiBmp">
            <summary>
            These files are similar to <see cref="F:SkaaGameDataLib.Util.FileFormats.SpriteSpr"/> but they have a <see cref="F:SkaaGameDataLib.Util.FileFormats._ResIdxFile"/> header containing
            the names and offsets of each of the images in the file. These images, instead of being animation frames for a 
            sprite, are simply different images. Nonetheless, the image data is formatted the same as <see cref="!:SkaaFrame"/>.
            </summary>
            <seealso cref="!:ResourceDefinitionReader.ReadDefinitions(Stream, bool)"/>
            <see cref="T:SkaaGameDataLib.Util.IndexedBitmap"/>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats.DbaseIII">
            <summary>
            A dBaseIII table
            </summary>
            <seealso cref="T:SkaaGameDataLib.Util.DbfFile"/>
        </member>
        <member name="F:SkaaGameDataLib.Util.FileFormats.Palette">
            <summary>
            A 7KAA-formatted palette file
            </summary>
        </member>
        <member name="T:SkaaGameDataLib.Util.ResourceDefinitionReader">
            <summary>
            Allows for the reading of record definitions within a file's stream. A record definition
            is simple a name and offset that describes a pieces of data. The name is a unique identifier 
            for the data and the offset describes where the data can be found in the file. This is used
            for reading the header of a game set file (std.set) as well as the headers of any <see cref="F:SkaaGameDataLib.Util.FileFormats._ResIdxFile"/>
            </summary>
            <seealso cref="M:SkaaGameDataLib.Util.DataSetExtensions.OpenStandardGameSet(System.Data.DataSet,System.String)"/>
        </member>
        <member name="F:SkaaGameDataLib.Util.ResourceDefinitionReader._maxAcceptableRecordCount">
            <summary>
            Arbitrary number that isn't necessary for the game but, since the record count
            is read from the file, it could be any 16-bit value. Since *.res files have no
            header by which to identify the file, we assume a file claiming more than 150
            records is not a valid resource file. This is only relevant when trying to read
            arbitrary files, for example, when attempting to identify a file's type.
            </summary>
        </member>
        <member name="F:SkaaGameDataLib.Util.ResourceDefinitionReader.ResIdxNameSize">
            <summary>
            The number of characters, including a null terminator, that is used as the unique name of a piece of data
            in a record within a <see cref="F:SkaaGameDataLib.Util.FileFormats._ResIdxFile"/>. Shorter names are right-padded with spaces (0x20).
            </summary>
        </member>
        <member name="F:SkaaGameDataLib.Util.ResourceDefinitionReader.ResIdxOffsetSize">
            <summary>
            The number of bytes used to represent the offset of the record in a <see cref="F:SkaaGameDataLib.Util.FileFormats._ResIdxFile"/>
            Values using less than this number of bytes are simply left-padded with nulls (0x0) in order to maintain
            alignment of the definitions. (Always left-padded, meaning little-endian.)
            </summary>
        </member>
        <member name="F:SkaaGameDataLib.Util.ResourceDefinitionReader.ResIdxDefinitionSize">
            <summary>
            The total size of a record definition in a <see cref="F:SkaaGameDataLib.Util.FileFormats._ResIdxFile"/>
            </summary>
        </member>
        <member name="M:SkaaGameDataLib.Util.ResourceDefinitionReader.ReadDefinitions(System.IO.Stream,System.Boolean)">
            <summary>
            Reads the header of a stream containing definitions of a piece of data's name and its offset in a file.
            </summary>
            <param name="str">
            The stream from which to read. The first two bytes at <see cref="P:System.IO.Stream.Position"/>
            must be a uint16 containing the number of definitions to be read.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of Name-Offset pairs, with  
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> set to the ASCII name of the record and 
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> set to that record's offset in a file.
            </returns>
        </member>
        <member name="F:SkaaGameDataLib.Util.IndexedBitmap._skaaTransparentColor">
            <summary>
            Used in <see cref="M:System.Drawing.Bitmap.MakeTransparent(System.Drawing.Color)"/>. "White transparent" is used in 7KAA's 
            sprites and the opacity is set to 0% as needed.
            </summary>
        </member>
        <member name="M:SkaaGameDataLib.Util.IndexedBitmap.GetBitmapFromRleBytes(System.Byte[],System.Drawing.Imaging.ColorPalette,System.Int32,System.Int32)">
            <summary>
            Builds a <see cref="T:System.Drawing.Bitmap"/> from an byte array of indexed color values based on the provided palette.
            Algorithm based on IMGbltAreaTransDecompress in IB_ATD.cpp.
            </summary>
            <param name="bitmapBytes">Byte array containing the pixel data and no header</param>
            <param name="pal">The palette to assign to the new Bitmap</param>
            <param name="height">The height of the Bitmap, in pixels</param>
            <param name="width">The width of the Bitmap, in pixels</param>
            <returns>A new <see cref="T:System.Drawing.Bitmap"/> with a <see cref="T:System.Drawing.Imaging.PixelFormat"/> of <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/></returns>
        </member>
        <member name="M:SkaaGameDataLib.Util.IndexedBitmap.DecodeRleStream(System.IO.Stream,SkaaGameDataLib.Util.FileFormats)">
            <summary>
            Reads a Run Length Encoded stream, where only transparent bytes are RLE, and builds a <see cref="T:System.Drawing.Bitmap"/>
            </summary>
            <param name="stream">A stream with its <see cref="P:System.IO.Stream.Position"/> set to the first byte of the header, which is two int16 values for width and height.</param>
        </member>
        <member name="T:SkaaGameDataLib.Util.PaletteLoader">
            <summary>
            Through <see cref="M:SkaaGameDataLib.Util.PaletteLoader.FromResFile(System.String)"/>, loads a 7KAA formatted color palette (see <see cref="F:SkaaGameDataLib.Util.FileFormats.Palette"/>)
            </summary>
        </member>
        <member name="M:SkaaGameDataLib.Util.PaletteLoader.FromResFile(System.String)">
            <summary>
            Reads a file in the format of a <see cref="F:SkaaGameDataLib.Util.FileFormats.Palette"/>
            </summary>
            <param name="filepath">The file to open</param>
            <returns>A new <see cref="T:System.Drawing.Imaging.ColorPalette"/> consisting of the colors in the specified file</returns>
        </member>
        <member name="F:SkaaGameDataLib.Util.DataColumnExtensions.ByteLengthPropertyName">
            <summary>
            Describes the length, in bytes, that this field must occupy in the DBF file. Text fields
            should be padded on the right with spaces (0x20) while number fields should be padded
            on the left with nulls (0x00). Numbers can be "padded" by using a <see cref="T:System.Convert"/> 
            function that corresponds to the needed number type. This field is separate and 
            unrelated to the <see cref="P:System.Data.DataColumn.MaxLength"/> property.
            </summary>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataColumnExtensions.GetByteLength(System.Data.DataColumn)">
            <summary>
            Returns the value of the <see cref="P:System.Data.DataColumn.ExtendedProperties"/> element named <see cref="F:SkaaGameDataLib.Util.DataColumnExtensions.ByteLengthPropertyName"/>
            </summary>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataColumnExtensions.SetByteLength(System.Data.DataColumn,System.Byte)">
            <summary>
            Sets the value of the <see cref="P:System.Data.DataColumn.ExtendedProperties"/> element named <see cref="F:SkaaGameDataLib.Util.DataColumnExtensions.ByteLengthPropertyName"/>
            </summary>
        </member>
        <member name="T:SkaaGameDataLib.Util.DbfFile">
            <summary>
            Represents a dBaseIII table (not to be confused with dBaseIII+ or FoxPro) in a DBF file and makes it manipulable via a DataTable. 
            </summary>
            <remarks>
            Constructed with help from: 
            http://www.clicketyclick.dk/databases/xbase/format/dbf.html 
            http://www.digitalpreservation.gov/formats/fdd/fdd000325.shtml
            </remarks>
        </member>
        <member name="M:SkaaGameDataLib.Util.DbfFile.ReadTableData(System.IO.Stream)">
            <summary>
            Fills a DataTable based on the dBaseIII field descriptor information.
            </summary>
            <returns>The new DataTable</returns>
        </member>
        <member name="M:SkaaGameDataLib.Util.FileTypeChecks.CheckFileType(System.String,System.Boolean)">
            <summary>
            Verifies the file's type by extension. *.res files are passed to <see cref="M:SkaaGameDataLib.Util.FileTypeChecks.CheckResFileType(System.String)"/> for 
            separate tests. Palettes, Audio and Fonts are simply identified by their prefixes: "pal_", "a_" and "fon_".
            </summary>
            <param name="filePath">The full path of the file to check</param>
            <param name="quickCheckByName">When set to true, uses a pre-set list of RES filenames from 7KAA and their known types.</param>
            <returns>
            The recognized <see cref="T:SkaaGameDataLib.Util.FileFormats"/> format or 
            <see cref="F:SkaaGameDataLib.Util.FileFormats._Unknown"/> if the file could not be recognized
            </returns>
        </member>
        <member name="M:SkaaGameDataLib.Util.FileTypeChecks.CheckResFileType(System.String)">
            <summary>
            First checks for a filename prefix identifying the file as a palette, font or audio. If it
            doesn't match, the file is passed to more in-depth file type checks that attempt to read the
            file and identify its type by assuming it is a particular type and attempting to use it.
            The failure to identify a type is identified through the generation of exceptions in the 
            various methods.
            </summary>
            <param name="filePath"></param>
            <returns>
            <see cref="F:SkaaGameDataLib.Util.FileFormats._Unknown"/> if the file can't be identified. Otherwise,
            the identified file type.
            </returns>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataTableExtensions.WriteResDefinition(System.Data.DataTable,System.IO.Stream,System.UInt32)">
            <summary>
            Writes a <see cref="T:SkaaGameDataLib.Util.ResourceDefinitionReader"/> header for this <see cref="T:System.Data.DataTable"/> to the <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="str">The <see cref="T:System.IO.Stream"/> to write the header to</param>
            <param name="offset">The offset in the <see cref="T:System.IO.Stream"/> at which to begin writing</param>
        </member>
        <member name="M:SkaaGameDataLib.Util.DataTableExtensions.WriteAllRowsAsResDefinitions(System.Data.DataTable,System.IO.Stream)">
            <summary>
            Calls <see cref="M:SkaaGameDataLib.Util.DataRowExtensions.WriteResDefinition(System.Data.DataRow,System.IO.Stream,System.UInt32)"/> for each row in the table
            </summary>
        </member>
        <member name="M:SkaaGameDataLib.GameObjects.SkaaSprite.MatchFramesToDataView(System.String,System.String)">
            <summary>
            Iterates through all the rows in <see cref="P:SkaaGameDataLib.GameObjects.SkaaSprite.DataView"/> and sets each of this
            sprite's <see cref="T:SkaaGameDataLib.GameObjects.SkaaSpriteFrame"/>'s <see cref="F:SkaaGameDataLib.GameObjects.SkaaSpriteFrame.GameSetDataRows"/>
            property to the DataRow with a matching <see cref="P:SkaaGameDataLib.GameObjects.SkaaSpriteFrame.BitmapOffset"/> or, if none is found, 
            a matching <see cref="F:SkaaGameDataLib.GameObjects.SkaaFrame.Name"/>. The frame's name and offset are set based on the corresponding
            cell in the DataView.
            </summary>
            <param name="frameNameColName">Either FILENAME for SFRAME in std.set or FrameName for ResIdxMultiBmp files</param>
            <param name="frameOffsetColName">Either BITMAPPTR for SFRAME in std.set or FrameOffset for ResIdxMultiBmp files</param>
            <returns>False if any frame did not have a match in the DataView. True otherwise.</returns>
            <remarks>
            SkaaSprite was based primarily on SPR files so a lot of the code was
            specific to those formats and ResIdxMultiBmp-formatted RES files, like
            i_button.res for example, were hacked in around that.
            
            This method will find matching frames in its Frames list based first off of the
            offset and, failing that, off the name. This is because SPR files have no
            frame name data in them so this was used to find those frames in std.set.
            These frames had their offsets calculated when the file was read. This
            allowed for opening an SPR file and opening std.set afterwards.
            ResIdxMultiBmp files have frame names in them so that can be used as a
            fallback.
            
            Additionally, an SPR's frames' names and offsets are stored in columns
            called "FILENAME" and "BITMAPPTR". This is in std.set's SFRAME table and
            is also used in other files. However, ResIdx files don't have field names
            like DBF files, so they're assigned "FrameName" and "FrameOffset" by the
            DataRowExtensions class. I chose to use these for ResIdxMultiBmpr ather 
            than BITMAPPTR and FILENAME primarily because FILENAME would be confusing 
            since there are no actual files for these frames; this is from the original developers.
            </remarks>
        </member>
        <member name="M:SkaaGameDataLib.GameObjects.SkaaSprite.GetSpriteFrameByteArrays">
            <summary>
            Builds a <see cref="T:System.Collections.Generic.List`1"/> of byte arrays, one array for each <see cref="T:SkaaGameDataLib.GameObjects.SkaaFrame"/> in <see cref="P:SkaaGameDataLib.GameObjects.SkaaSprite.Frames"/>
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/> where T is a <see cref="T:byte[]"/></returns>
        </member>
        <member name="M:SkaaGameDataLib.GameObjects.SkaaSprite.FromSprStream(System.IO.Stream,System.Drawing.Imaging.ColorPalette)">
            <summary>
            Creates a new <see cref="T:SkaaGameDataLib.GameObjects.SkaaSprite"/> from a stream of SPR-formatted data
            </summary>
            <param name="str">The stream to read the SPR data from</param>
            <param name="pal">The <see cref="T:System.Drawing.Imaging.ColorPalette"/> to apply to the sprite's images</param>
            <returns>A new <see cref="T:SkaaGameDataLib.GameObjects.SkaaSprite"/></returns>
            <remarks>
            The original game code for reading SPR files can be found <c>ResourceDb::init_imported()</c> 
            in src/ORESDB.cpp around line 72. The <c>resName</c> will be "sprite\\NAME.SPR". SPR files are 
            are considered <c>FLAT</c> by 7KAA. 
            </remarks>
        </member>
        <member name="M:SkaaGameDataLib.GameObjects.SkaaSpriteFrame.#ctor(SkaaGameDataLib.GameObjects.SkaaSprite)">
            <summary>
            Initializes a new <see cref="T:SkaaGameDataLib.GameObjects.SkaaSpriteFrame"/>.
            </summary>
            <param name="parentSprite">The <see cref="T:SkaaGameDataLib.GameObjects.SkaaSprite"/> containing this <see cref="T:SkaaGameDataLib.GameObjects.SkaaSpriteFrame"/></param>
            <param name="stream"></param>
        </member>
    </members>
</doc>
